identWidth: 2
inheritAlways: true

header: jdbc-op jdbc CLI Tool

helpDesc:
  help: Print help information

inheritHelpDesc:
  help: Print help information
  debug: Print debug information
  jdbcUrl: "JDBC connection parameters: JDBC URL"
  user: "JDBC connection parameters: user"
  password: "JDBC connection parameters: password"
  props: Additional jdbc parameters
  driverPath: The directory where the JDBC driver jar package is located
  driverClass: JDBC driver fully qualified class name
  yes: Whether to actually open a JDBC connection and execute SQLs
  columnName: "Common column name template，example: c_${type}_${index}"
  partitionColumnName: "Partition column name template，example: p_${type}_${index}"
  commentAlone: Whether to generate additional comment sql
  columnCommentSql: "comment sql\n${ls}Example：comment on column $table.$column is 'Column Type: $type';\n${ls}Or：Column Type: $type"
  compact: Compact mode, SQL does not wrap
  extraColumnSql: Additional column SQL that needs to be created
  tableSuffixSql: Custom SQL suffix for table creation
  batchSize: The size limit of batch insert, that is, the maximum number of rows of generated values
  rowNum: Total number of rows inserted
  columnQuota: Whether to escape column names
  doubleQuota: Whether the column name escape character is a double quote
  dataSourceType: compatible data source, such as postgresql, mysql, oracle, db2, sqlserver
  converters: "Literal conversion functions, example: binary:cast($value as $type)"
  converterFile: "Specify the file of literal conversion functions, separated by newline character \\n"
  setEnumValues: The enumeration value of set and enum type, the default is `a, b, c, d`
  rollingFile: "Generated rolling SQL filename, example: output_${i+100}.sql"
  rollingFileMaxSqlCount: Specifies the maximum number of SQL entries for each rolling small file

subcommands:
  insert-random:
    commandDesc: Insert random data into the specified table
    header: "jdbc-op insert-random Insert random data into the specified table\nExample: jdbc-op insert-random test_table --jdbc-url jdbc:mysql://127.0.0.1:3306/test_db \
           -uroot -proot -d /path/to/mysql-jdbc-driver.jar -n10 -i id ctime mtime"
    helpParam:
      batchSize: n
      rowNum: n
    helpDesc:
      tableName: "Table name，example: my_table, my_db.my_table"
      ignoredColumns: Ignored columns, multiple values can be passed in
      partitionColumns: Specify the partition columns

  type-table:
    commandDesc: Generate corresponding tables and data through the specified type
    header: "jdbc-op type-table Generate corresponding tables and data through the specified type\nExample: jdbc-op typed-table t_all_type -t int double date"
    helpParam:
      types: <type1 type2 ...>
      partitionTypes: <type1 type2 ...>
      columnCommentSql: sql
      batchSize: <n>
      rowNum: <n>
    helpDesc:
      tableName: "Table name，example: my_table, my_db.my_table"
      file: "Describe the column type file, separated by newline \\n.\n${ls}For example: `int`, `varchar(%d)`, `@decimal(%d, %d)`; You can add the @ prefix to define the partition type"
      fileContent: Describe the content of the column type file. The difference from --file is that the accepted parameter is the text content instead of the file name
      types: Column types, multiple values can be passed in, mutually exclusive with -f, the value of -f is preferred
      partitionTypes: Partition type
  batch-type-table:
    commandDesc: Generate data tables and data in batches
    header: "jdbc-op batch-type-table Generate data tables and data in batches\nExample: jdbc-op batch-type-table -t bigint timestamp string"
    helpParam:
      types: <type1 type2 ...>
      combinationMode: <m1 m2 m3-m4 m5 ...>
      combinationRepeat: n
      columnCommentSql: sql
      batchSize: n
      rowNum: n
    helpDesc:
      help: Print help information
      file: Describe the column type file, each line represents a table, the type is separated by , and there can be spaces near the comma
      types: Column types, multiple values can be passed in, mutually exclusive with -f, the value of -f is preferred
      combinationMode: "Use the type specified by -t to generate a combination\n${ls} For example, there are 9 types in total, and the value of combinationMode is [3, 6-8]\n${ls} means that 9 respectively takes 3, 6, Combinations of 7 and 8, generate corresponding tables for each possible combination"
      combinationRepeat: The number of repetitions for each combination
      tableNamePrefix: "Table name template, for example: test.t_table_%d"
      tableNameOffset: The starting offset of %d in tableNamePrefix
      ignoreError: Whether to ignore the error and continue after the SQL execution fails
      outputFile: File name, to save SQL
      outputFileSqlMaxCount: "Stored in separate files, the maximum number of SQL in each file\n${ls}outputFile takes a.sql, then generates a1.sql, a2.sql ..."
